var documenterSearchIndex = {"docs":
[{"location":"api/#EarthEngineREST.jl-API","page":"API","title":"EarthEngineREST.jl API","text":"","category":"section"},{"location":"api/#EarthEngineREST-Types","page":"API","title":"EarthEngineREST Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.EESession","category":"page"},{"location":"api/#EarthEngineREST.EESession","page":"API","title":"EarthEngineREST.EESession","text":"EESession type used for authenticating request to the API\n\nproject::AbstractString\nGCP project name used for REST API requests\nauth::PyCall.PyObject\nauthenticated Python requests session for making requests\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.GridDimensions","category":"page"},{"location":"api/#EarthEngineREST.GridDimensions","page":"API","title":"EarthEngineREST.GridDimensions","text":"Type used for defining the number of rows and columns for image requests See https://developers.google.com/earth-engine/reference/rest/v1beta/PixelGrid#GridDimensions\n\nwidth::Integer\nwidth of the grid, in pixels\nheight::Integer\nheight of the grid, in pixels\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.AffineTransform","category":"page"},{"location":"api/#EarthEngineREST.AffineTransform","page":"API","title":"EarthEngineREST.AffineTransform","text":"Type for defining the affine transform of image requests. The six values form a 2x3 matrix:\n\nSee https://developers.google.com/earth-engine/reference/rest/v1beta/PixelGrid#affinetransform\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.PixelGrid","category":"page"},{"location":"api/#EarthEngineREST.PixelGrid","page":"API","title":"EarthEngineREST.PixelGrid","text":"Type used for defining a pixel grid on the surface of the Earth, via a map projection See https://developers.google.com/earth-engine/reference/rest/v1beta/PixelGrid\n\ndimensions::GridDimensions\ndimensions of the pixel grid\naffineTransform::AffineTransform\naffine transform of pixel grid\ncrsCode::AbstractString\nstandard coordinate reference system code (e.g. 'EPSG:4326')\n\n\n\n\n\n","category":"type"},{"location":"api/#Image-Computations","page":"API","title":"Image Computations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.computepixels","category":"page"},{"location":"api/#EarthEngineREST.computepixels","page":"API","title":"EarthEngineREST.computepixels","text":"computepixels(session::EESession, pixelgrid::PixelGrid, image::EE.AbstractEEObject; format::AbstractString = \"NPY\")\n\nFunction to take an EarthEngine computed image and return an Array with geographic information (i.e. GeoArray). This signature will return all of the bands within the image. Currently on the \"NPY\" format is available. See https://developers.google.com/earth-engine/reference/rest/v1beta/projects.image/computePixels\n\n\n\n\n\ncomputepixels(session::EESession, pixelgrid::PixelGrid, image::EE.AbstractEEObject, bands::AbstractVector{String}; format::AbstractString = \"NPY\")\n\nFunction to take an EarthEngine computed image and return an Array with geographic information (i.e. GeoArray). Currently on the \"NPY\" format is available. See https://developers.google.com/earth-engine/reference/rest/v1beta/projects.image/computePixels\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.parse_npy_header","category":"page"},{"location":"api/#EarthEngineREST.parse_npy_header","page":"API","title":"EarthEngineREST.parse_npy_header","text":"parse_npy_header(hdr::AbstractString)\n\nFunction to parse npy header information to extract dimensions and array dtypes. Customized implementation of NPY.parseheader to handle numpy structured arrays which EE always returns. See https://numpy.org/devdocs/reference/generated/numpy.lib.format.html#format-version-1-0 for spec.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.decode_npy_response","category":"page"},{"location":"api/#EarthEngineREST.decode_npy_response","page":"API","title":"EarthEngineREST.decode_npy_response","text":"decode_npy_response(response::PyObject)\n\nFunction to take a response object of a npy bytes and convert to Julia array\n\n\n\n\n\n","category":"function"},{"location":"api/#Table-Computations","page":"API","title":"Table Computations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.computetable","category":"page"},{"location":"api/#EarthEngineREST.computetable","page":"API","title":"EarthEngineREST.computetable","text":"computetable(session::EESession, featurecollection::EE.AbstractEEObject)\n\nFuction to request data from EarthEngine FeatureCollection and return as a GeoDataFrame. See https://developers.google.com/earth-engine/reference/rest/v1beta/projects.table/computeFeatures\n\n\n\n\n\n","category":"function"},{"location":"api/#Value-Computations","page":"API","title":"Value Computations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.computevalue","category":"page"},{"location":"api/#EarthEngineREST.computevalue","page":"API","title":"EarthEngineREST.computevalue","text":"computevalue(session::EESession, value::EE.AbstractEEObject)\n\nFuction to request data from any arbitrary EarthEngine computation and return as the appropriate Julia object. See https://developers.google.com/earth-engine/reference/rest/v1beta/projects.value/compute\n\n\n\n\n\n","category":"function"},{"location":"api/#EarthEngineREST-internals","page":"API","title":"EarthEngineREST internals","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.Initialize","category":"page"},{"location":"api/#EarthEngine.Initialize","page":"API","title":"EarthEngine.Initialize","text":"Initialize(session::EESession)\n\nExtends the Initialize() function to take an authenticated Earth Engine session and use those credentials.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST._sendrequest","category":"page"},{"location":"api/#EarthEngineREST._sendrequest","page":"API","title":"EarthEngineREST._sendrequest","text":"_sendrequest(session::EESession, endpoint::AbstractString, data::Dict{Symbol,<:Any}; version::AbstractString = \"latest\", nretries::Integer = 4)\n\nPrivate function for sending requests to EarthEngine REST API. Uses exponential backoff to retry requests if failed with non-fatal error.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.typetodict","category":"page"},{"location":"api/#EarthEngineREST.typetodict","page":"API","title":"EarthEngineREST.typetodict","text":"typetodict(x::T)\n\nFunction to convert EarthEngineREST types to dictionary key,value pairs to encode for API requests\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.extract_geotransform","category":"page"},{"location":"api/#EarthEngineREST.extract_geotransform","page":"API","title":"EarthEngineREST.extract_geotransform","text":"extract_geotransform(x::AffineTransform)\n\nFunction to extract geotransform vector from AffineTransformation type\n\n\n\n\n\nextract_geotransform(x::PixelGrid)\n\nFunction to extract geotransform vector from PixelGrid type\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.extract_bbox","category":"page"},{"location":"api/#EarthEngineREST.extract_bbox","page":"API","title":"EarthEngineREST.extract_bbox","text":"extract_bbox(x::AffineTransform)\n\nFunction to extract bounding box vector from AffineTransform type. Vector will be [W, S, E, N]\n\n\n\n\n\nextract_bbox(x::PixelGrid)\n\nFunction to extract bounding box vector from PixelGrid type. Vector will be [W, S, E, N]\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"EarthEngineREST.extract_affinemap","category":"page"},{"location":"api/#EarthEngineREST.extract_affinemap","page":"API","title":"EarthEngineREST.extract_affinemap","text":"extract_affinemap(x::AffineTransform)\n\nFunction to extract AffineMap type from AffineTransform type.\n\n\n\n\n\nextract_affinemap(x::PixelGrid)\n\nFunction to extract AffineMap type from PixelGrid type.\n\n\n\n\n\n","category":"function"},{"location":"#EarthEngineREST.jl","page":"Home","title":"EarthEngineREST.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia package to send REST API requests to Google Earth Engine","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The EarthEngineREST.jl package aims to make connecting Earth Engine (EE) computations with Julia processing easier. This package is meant to interface with EarthEngine.jl and request Julia types/data from EE Types. While this package provides this functionality, the broader goal is to provide the full capabilities of the Earth Engine REST API","category":"page"},{"location":"","page":"Home","title":"Home","text":"It should be noted that restee relies on fairly new and advanced EE features that may not be suitable for all users (see warning from the EE team). If you are new to Earth Engine, please get started with the JavaScript guide.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EarthEngineREST.jl is available through the Julia package registry, therefore you can install using the following code:","category":"page"},{"location":"","page":"Home","title":"Home","text":"$ julia\njulia> ]\npkg> add EarthEngineREST\njulia> using EarthEngineREST","category":"page"},{"location":"","page":"Home","title":"Home","text":"EarthEngineREST requires that the EarthEngine Julia packaged is installed as well. To do this, please see the EarthEngine installation guide","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This quick start example illustrates some of the core functionality of requesting Earth Engine computations to Julia types. To get started, you will need to import the packages and authenticate the APIs:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EarthEngine\nusing EarthEngineREST\n\nsession = EESession(\"secret_key.json\")\n\nInitialize(session)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here the packages are imported and an authorized session for requesting information is created from your private key file for your service account. To get a private key file for your service account see the following the offical Earth Engine REST API Quickstart guide. The authorized session can also be used to Initialize the EarthEngine API as above.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next we will using EathEngine to create some computations:","category":"page"},{"location":"","page":"Home","title":"Home","text":"states = EE.FeatureCollection(\"TIGER/2018/States\")\nneus = filter(states,inList(\"NAME\",(\n    \"Maine\",\"Vermont\",\"New Hampshire\", \"Massachusetts\"\n)))\n\n\n# Imagery: NDVI vegetation index from MODIS.\nband = \"NDVI\"\nimages = select(EE.ImageCollection(\"MODIS/006/MOD13Q1\"), band)\nimage = first(images)\n\ncomputation = reduceRegions(\n    image;\n    collection=neus,\n    reducer=setOutputs(mean(EE.Reducer()),(band,)),\n    scale=nominalScale(projection(image))\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now that we have defined the computation, we can request that table using computetable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tableresult = computetable(session, computation)\n\n# 4×16 DataFrame\n#  Row │ ALAND        AWATER       DIVISION  FUNCSTAT  GEOID   INTPTLAT     INTPTLON      LSAD    MTFCC   NAME           NDVI     REGION  STATEFP  STATENS   STUSPS  geom             ⋯\n#      │ Int64        Int64        String    String    String  String       String        String  String  String         Float64  String  String   String    String  IGeometr…        ⋯\n# ─────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n#    1 │ 23189413166   1026675248  1         A         33      +43.6726907  -071.5843145  00      G4000   New Hampshire  2579.07  1       33       01779794  NH      Geometry: wkbPol ⋯\n#    2 │ 23874175944   1030416650  1         A         50      +44.0685773  -072.6691839  00      G4000   Vermont        1940.65  1       50       01779802  VT      Geometry: wkbPol\n#    3 │ 79887426037  11746549764  1         A         23      +45.4092843  -068.6666160  00      G4000   Maine          1911.13  1       23       01779787  ME      Geometry: wkbPol\n#    4 │ 20205125364   7129925486  1         A         25      +42.1565196  -071.4895915  00      G4000   Massachusetts  4190.74  1       25       00606926  MA      Geometry: wkbPol\n#                                                                                                                                                                      1 column omitted","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also request image data. To do this, we need to define the geographic coordinate of to the image data we would like and then requst the data using computepixels:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# define a pixel grid for the Northeast US states at about 1km\npixelgrid = PixelGrid(session, neus, 0.01, \"EPSG:4326\")\n\ndata = computepixels(session, pixelgrid, image)\n# 62x627x1 Array{Int16, 3} with AffineMap([0.01 0.0; 0.0 -0.01], [-73.50818980721034, 47.459858919112]) and CRS EPSG:4326","category":"page"},{"location":"","page":"Home","title":"Home","text":"If we plot the results we should see something like the following image:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: ndvi_example)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lastly, to illustrate how to get data from non-spatial computations, here we gather some metadata information from the image and make requests.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# compute the band names and get a local array\nimgbands = bandNames(image)\nbandlist = computevalue(session,imgbands)\n# 1-element Vector{String}:\n#  \"NDVI\"\n\n# compute the image date and get as local string\nimgdate = format(date(image),\"YYYY-MM-dd\")\ndatestr = computevalue(session,imgdate)\n# \"2000-02-18\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sometimes calculating statistics or reading metadata from the image/collections is needed. Using the computevalue above, essentially any EE.ComputedObject can be requested to a local Julia data type and continue using on our local system.","category":"page"},{"location":"","page":"Home","title":"Home","text":"More information on the API can be found in the API docs","category":"page"}]
}
